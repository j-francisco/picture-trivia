// Generated by CoffeeScript 1.9.0
(function() {
  var __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  define(["backbone", "views/base_header_view", "views/login_view", "views/home_view", "views/categories_view", "views/get_ready_view", "views/game_view"], function(Backbone, BaseHeaderView, LoginView, HomeView, CategoriesView, GetReadyView, GameView) {
    var AppRouter;
    AppRouter = (function(_super) {
      __extends(AppRouter, _super);

      function AppRouter() {
        return AppRouter.__super__.constructor.apply(this, arguments);
      }

      AppRouter.prototype.routes = {
        "": "home",
        "login(/:direction)": "login",
        "home(/:direction)": "home",
        "game(/:direction)": "game",
        "categories(/:direction)": "categories",
        "get_ready/:category(/:direction)": "getReady"
      };

      AppRouter.prototype.directionBack = "back";

      AppRouter.prototype.directionForward = "forward";

      AppRouter.prototype.directionFade = "fade";

      AppRouter.prototype.initialize = function() {
        this.currentHeader = new BaseHeaderView();
        return $("header").html(this.currentHeader.render().el);
      };

      AppRouter.prototype.execute = function(callback, args) {
        if (this.beforeRoute(callback)) {
          if (callback) {
            callback.apply(this, args);
          }
          return this.afterRoute();
        }
      };

      AppRouter.prototype.routeRequiresAuth = function(callback) {
        var nonAuthRoutes;
        nonAuthRoutes = [this.login];
        return !_.contains(nonAuthRoutes, callback);
      };

      AppRouter.prototype.routeNotAccessibleAfterAuth = function(callback) {
        var noAccessAfterAuthRoutes;
        noAccessAfterAuthRoutes = [this.login];
        return _.contains(noAccessAfterAuthRoutes, callback);
      };

      AppRouter.prototype.beforeRoute = function(callback) {
        if (!callback) {
          return false;
        }
        if (this.routeRequiresAuth(callback) && !this.auth()) {
          this.navigate("login", true);
          return false;
        } else if (this.routeNotAccessibleAfterAuth(callback) && this.auth()) {
          this.navigate("", true);
          return false;
        }
        return true;
      };

      AppRouter.prototype.afterRoute = function() {};

      AppRouter.prototype.auth = function() {
        return (localStorage.pictureTriviaLoginEmail != null) && localStorage.pictureTriviaUserId;
      };

      AppRouter.prototype.resetCurrentView = function(view) {
        if (this.currentView != null) {
          this.currentView.remove();
        }
        return this.currentView = view;
      };

      AppRouter.prototype.login = function(direction) {
        var el, view;
        view = new LoginView();
        el = view.render().$el;
        this.transition(el, direction);
        this.resetCurrentView(view);
        return this.navigate("login");
      };

      AppRouter.prototype.home = function(direction) {
        var el, view;
        view = new HomeView();
        el = view.render().$el;
        this.transition(el, direction);
        this.resetCurrentView(view);
        return this.navigate("home");
      };

      AppRouter.prototype.game = function(direction) {
        var el, view;
        view = new GameView();
        el = view.render().$el;
        this.transition(el, direction);
        this.resetCurrentView(view);
        return this.navigate("game");
      };

      AppRouter.prototype.categories = function(direction) {
        var el, view;
        view = new CategoriesView();
        el = view.render().$el;
        this.transition(el, direction);
        this.resetCurrentView(view);
        return this.navigate("categories");
      };

      AppRouter.prototype.getReady = function(categoryName, direction) {
        var el, view;
        view = new GetReadyView({
          categoryName: categoryName
        });
        el = view.render().$el;
        this.transition(el, direction);
        this.resetCurrentView(view);
        return this.navigate("get_ready");
      };

      AppRouter.prototype.bars = {
        bartab: '.bar-tab',
        barnav: '.bar-nav',
        barfooter: '.bar-footer',
        barheadersecondary: '.bar-header-secondary'
      };

      AppRouter.prototype.transition = function(el, direction, container, callback) {
        var data, options, transition;
        transition = (function() {
          switch (false) {
            case direction !== this.directionBack:
              return "slide-out";
            case direction !== this.directionForward:
              return "slide-in";
            case direction !== this.directionFade:
              return "fade";
            default:
              return "none";
          }
        }).call(this);
        container = container != null ? container : $("#content").children().first();
        data = {
          contents: el
        };
        options = {
          transition: transition,
          container: container,
          callback: callback
        };
        return this.doTransition(data, options, callback);
      };

      AppRouter.prototype.doTransition = function(data, options, callback) {
        var barElement, key, _i, _len, _ref;
        if (data.title) {
          document.title = data.title;
        }
        if (options.transition) {
          _ref = this.bars;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            if (this.bars.hasOwnProperty(key)) {
              barElement = $(this.bars[key]);
              if (data[key]) {
                swapContent(data[key], barElement);
              } else if (barElement) {
                barElement.remove();
              }
            }
          }
        }
        return this.swapContent(data.contents, options.container, options.transition, callback);
      };

      AppRouter.prototype.swapContent = function(swap, container, transition, callback) {
        var containerDirection, enter, fadeContainerEnd, fadeSwapEnd, slideEnd, swapDirection, transitionEnd;
        transitionEnd = 'transitionend webkitTransitionEnd oTransitionEnd otransitionend';
        if (!transition || transition === "none") {
          if (container && container.length > 0) {
            container.parent().html(swap);
          } else if (swap.hasClass('content')) {
            $('body').append(swap);
          } else {
            $('.content').html(swap);
          }
          return callback && callback();
        } else if (container && container.length > 0) {
          enter = /in$/.test(transition);
          if (transition === 'fade') {
            container.addClass('in');
            container.addClass('fade');
            swap.addClass('fade');
            container.parent().prepend(swap);
            container[0].offsetWidth;
            container.removeClass('in');
            fadeContainerEnd = function() {
              swap.addClass('in');
              return swap.one(transitionEnd, fadeSwapEnd);
            };
            fadeSwapEnd = function() {
              container.remove();
              swap.removeClass('fade');
              swap.removeClass('in');
              return callback && callback();
            };
            container.one(transitionEnd, fadeContainerEnd);
          }
          if (/slide/.test(transition)) {
            swap.addClass('view-content');
            swap.addClass('sliding-in');
            swapDirection = enter ? 'right' : 'left';
            swap.addClass(swapDirection);
            swap.addClass('sliding');
            container.addClass('view-content');
            container.addClass('sliding');
            container.parent().prepend(swap);
            slideEnd = function() {
              swap.removeClass('sliding');
              swap.removeClass('sliding-in');
              swap.removeClass(swapDirection);
              swap.removeClass('view-content');
              container.remove();
              return callback && callback();
            };
            container[0].offsetWidth;
            swapDirection = enter ? 'right' : 'left';
            containerDirection = enter ? 'left' : 'right';
            container.addClass(containerDirection);
            swap.removeClass(swapDirection);
            return swap.one(transitionEnd, slideEnd);
          }
        } else {
          if (swap.hasClass('content')) {
            $('body').append(swap);
          } else {
            $('.content').html(swap);
          }
          return callback && callback();
        }
      };

      return AppRouter;

    })(Backbone.Router);
    return AppRouter;
  });

}).call(this);
