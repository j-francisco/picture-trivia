// Generated by CoffeeScript 1.9.0
(function() {
  var __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  define(["backbone", "models/item", "views/itemview"], function(Backbone, Item, ItemView) {
    var ItemCollectionView;
    ItemCollectionView = (function(_super) {
      __extends(ItemCollectionView, _super);

      function ItemCollectionView() {
        return ItemCollectionView.__super__.constructor.apply(this, arguments);
      }

      ItemCollectionView.prototype.el = '#yourcart';

      ItemCollectionView.prototype.initialize = function(collection) {
        this.collection = collection;
        this.render();
        return this.collection.on("reset", this.render, this);
      };

      ItemCollectionView.prototype.render = function() {
        this.$el.html("");
        return this.collection.each(function(item) {
          return this.renderItem(item);
        }, this);
      };

      ItemCollectionView.prototype.renderItem = function(item) {
        var itemView;
        itemView = new ItemView({
          model: item
        });
        return this.$el.append(itemView.render().el);
      };

      ItemCollectionView.prototype.addItem = function() {
        var data, newItem;
        data = {};
        $("#add").children("input[type='text']").each(function(i, el) {
          return data[el.id] = $(el).val();
        });
        newItem = new Item(data);
        this.collection.add(newItem);
        return this.renderItem(newItem);
      };

      ItemCollectionView.prototype.filterByPrice = function() {
        var filtered, max;
        this.collection.reset(items, {
          silent: true
        });
        max = parseFloat($("#less-than").val(), 10);
        filtered = _.filter(this.collection.models, function(item) {
          return item.get("price") < max;
        });
        return this.collection.reset(filtered);
      };

      ItemCollectionView.prototype.clearFilter = function() {
        $("#less-than").val("");
        return this.collection.reset(items);
      };

      return ItemCollectionView;

    })(Backbone.View);
    return ItemCollectionView;
  });

}).call(this);
