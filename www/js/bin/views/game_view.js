// Generated by CoffeeScript 1.9.0
(function() {
  var __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  define(["backbone", "views/base_view", "text!tpl/game.html", "text!tpl/game_loading.html", "models/answer", "collections/answer_collection", "models/question", "models/game", "views/question_view"], function(Backbone, BaseView, template, loadingTemplate, Answer, AnswerCollection, Question, Game, QuestionView) {
    var GameView;
    GameView = (function(_super) {
      __extends(GameView, _super);

      function GameView() {
        return GameView.__super__.constructor.apply(this, arguments);
      }

      GameView.prototype.template = _.template(template);

      GameView.prototype.loadingTemplate = _.template(loadingTemplate);

      GameView.prototype.tagName = "div";

      GameView.prototype.className = "game";

      GameView.prototype.eventBus = [
        {
          "question:answered": "questionAnswered"
        }
      ];

      GameView.prototype.currentQuestionIndex = 0;

      GameView.prototype.subViews = [];

      GameView.prototype.initialize = function(options) {
        var game, gameDetails;
        this.categoryName = options.categoryName;
        game = new Game();
        gameDetails = {
          category_name: this.categoryName,
          user_id: localStorage.pictureTriviaUserId
        };
        return game.save(gameDetails, {
          success: (function(_this) {
            return function(newGame) {
              return _this.startGame(newGame);
            };
          })(this),
          error: function(model, response, options) {
            var error;
            error = $.parseJSON(response.responseText).errors;
            alert(error);
            return Backbone.history.loadUrl("home");
          }
        });
      };

      GameView.prototype.startGame = function(game) {
        this.subViews = [];
        this.currentQuestionIndex = 0;
        this.game = game;
        return this.render(true);
      };

      GameView.prototype.render = function(ready) {
        if (ready == null) {
          ready = false;
        }
        if (ready) {
          this.$el.html(this.template());
          this.renderNextQuestion(0);
        } else {
          this.$el.html(this.loadingTemplate());
        }
        return this;
      };

      GameView.prototype.renderNextQuestion = function(questionIndex) {
        var nextQuestionEl, previousQuestionView, question, questionContainer, questionJson;
        this.currentQuestionIndex = questionIndex;
        questionJson = this.game.get("questions")[questionIndex];
        if (questionJson != null) {
          previousQuestionView = this.questionView;
          question = new Question(questionJson);
          this.questionView = new QuestionView({
            model: question
          });
          this.subViews.push(this.questionView);
          questionContainer = this.$el.find(".question-container");
          nextQuestionEl = this.questionView.render().el;
          if (this.currentQuestionIndex === 0) {
            questionContainer.html(nextQuestionEl);
            if (previousQuestionView != null) {
              return previousQuestionView.remove();
            }
          } else {
            return questionContainer.fadeOut(400, (function(_this) {
              return function() {
                questionContainer.html(nextQuestionEl);
                questionContainer.fadeIn(400);
                if (previousQuestionView != null) {
                  return previousQuestionView.remove();
                }
              };
            })(this));
          }
        } else {
          return alert("All Done!");
        }
      };

      GameView.prototype.questionAnswered = function(questionId, answerId, isCorrect) {
        var nextIndex;
        nextIndex = this.currentQuestionIndex + 1;
        if (this.game.get("questions").length === nextIndex) {
          this.submitAnswer(questionId, answerId, isCorrect, true);
          return alert("All Done!");
        } else {
          this.submitAnswer(questionId, answerId, isCorrect, false);
          return setTimeout(((function(_this) {
            return function() {
              return _this.renderNextQuestion(nextIndex);
            };
          })(this)), 1500);
        }
      };

      GameView.prototype.submitAnswer = function(questionId, answerId, isCorrect, isFinished) {
        return $.ajax({
          url: window.apiHost + "submit_answer",
          type: "PUT",
          data: {
            user_id: localStorage.pictureTriviaUserId,
            user_game_id: this.game.get("user_game_id"),
            selected_answer_id: answerId,
            question_id: questionId,
            is_finished: isFinished
          },
          success: function(result) {
            return console.log("question answered successfully");
          },
          error: function(result) {
            console.log(result.responseText);
            return console.log("question answer failed");
          }
        });
      };

      return GameView;

    })(BaseView);
    return GameView;
  });

}).call(this);
